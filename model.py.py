# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eoMklFCaEzb_omMYdZT-lXLtGnx-WpEI

**WALMART SALES ANALYSIS**
"""

import pandas as pd

#Loading the dataset

file_path ='/content/WalmartSalesData.csv'
data = pd.read_csv(file_path)

# Displaying the first few rows of the dataset

print(data.head())

import matplotlib.pyplot as plt
import seaborn as sns

# Descriptive statistics
desc_stats = data.describe()

# Checking for missing values
missing_values = data.isnull().sum()

# Distribution of numerical variables
numerical_columns = ['Unit price', 'Quantity', 'Total', 'cogs', 'gross income', 'Rating']
fig, axs = plt.subplots(3, 2, figsize=(15, 12))

for i, col in enumerate(numerical_columns):
    sns.histplot(data[col], kde=True, ax=axs[i//2, i%2])
    axs[i//2, i%2].set_title(f'Distribution of {col}')

plt.tight_layout()

# Correlation matrix (select only numerical columns)
corr_matrix = data[numerical_columns].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')

# Distribution of categorical variables
categorical_columns = ['Branch', 'City', 'Customer type', 'Gender', 'Product line', 'Payment']
fig, axs = plt.subplots(3, 2, figsize=(15, 12))

for i, col in enumerate(categorical_columns):
    sns.countplot(data=data, x=col, ax=axs[i//2, i%2])
    axs[i//2, i%2].set_title(f'Distribution of {col}')

plt.tight_layout()
plt.show()

# Display results
desc_stats, missing_values

"""IMPLEMENTATION OF PREDICTIVE MODEL

"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Data Preprocessing
X = data.drop(['Invoice ID', 'Date', 'Time', 'Total'], axis=1)
y = data['Total']

# Column transformer for encoding categorical features and scaling numerical features
numerical_features = ['Unit price', 'Quantity', 'cogs', 'gross income', 'Rating']
categorical_features = ['Branch', 'City', 'Customer type', 'Gender', 'Product line', 'Payment']

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(), categorical_features)
    ])

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the model pipeline
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
])

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)

rmse, r2

from google.colab import drive
drive.mount('/content/drive')

"""EDA AND PREDICTIVE MODELLING"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
file_path = '/content/WalmartSalesData.csv'
data = pd.read_csv(file_path)

# Descriptive statistics
desc_stats = data.describe()
print("Descriptive Statistics:\n", desc_stats)

# Check for missing values
missing_values = data.isnull().sum()
print("Missing Values:\n", missing_values)

# Distribution of numerical variables
numerical_columns = ['Unit price', 'Quantity', 'Total', 'cogs', 'gross income', 'Rating']
fig, axs = plt.subplots(3, 2, figsize=(15, 12))

for i, col in enumerate(numerical_columns):
    sns.histplot(data[col], kde=True, ax=axs[i//2, i%2])
    axs[i//2, i%2].set_title(f'Distribution of {col}')

plt.tight_layout()

# Correlation matrix (select only numerical columns)
corr_matrix = data[numerical_columns].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Distribution of categorical variables
categorical_columns = ['Branch', 'City', 'Customer type', 'Gender', 'Product line', 'Payment']
fig, axs = plt.subplots(3, 2, figsize=(15, 12))

for i, col in enumerate(categorical_columns):
    sns.countplot(data=data, x=col, ax=axs[i//2, i%2])
    axs[i//2, i%2].set_title(f'Distribution of {col}')

plt.tight_layout()
plt.show()

# Data Preprocessing
X = data.drop(['Invoice ID', 'Date', 'Time', 'Total'], axis=1)
y = data['Total']

# Column transformer for encoding categorical features and scaling numerical features
numerical_features = ['Unit price', 'Quantity', 'cogs', 'gross income', 'Rating']
categorical_features = ['Branch', 'City', 'Customer type', 'Gender', 'Product line', 'Payment']

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(), categorical_features)
    ])

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the model pipeline
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
])

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)

print("RMSE:", rmse)
print("R-squared:", r2)

"""THE END


"""